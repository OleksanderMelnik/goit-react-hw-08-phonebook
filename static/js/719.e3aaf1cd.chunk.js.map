{"version":3,"file":"static/js/719.e3aaf1cd.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const H3 = styled.h3`\n  margin: 30px 10px 10px;\n  color: #4e6141;\n`\n\nexport const ContactsList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 24px;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 6px;\n  padding: 20px 20px;\n  border-radius: 24px;\n  border: 1px solid rgba(0, 0, 0, 0.04);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.04);\n`;\n\nexport const ContactName = styled.p`\n  display: flex;\n  align-items: center;\n  gap: 14px;\n  margin: 0;\n  font-weight: 500;\n`;\n\nexport const ContactNumber = styled.p`\n  display: flex;\n  align-items: center;\n  gap: 14px;\n  margin: 0;\n`;\n\nexport const Button = styled.button`\n  font-weight: 700;\n  display: flex;\n  align-items: center;\n  gap: 14px;\n  padding: 0.563em 1em;\n  background-color: #ecf0f3;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.04);\n  border: 1px solid rgba(250, 187, 24, 0.1);\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  transition: fill 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover,\n  :focus {\n        box-shadow: none;\n        color: white;\n        background: #FD9222;\n    }\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contacts/operations/contactsThunk';\nimport { getFilteredContacts, selectContacts } from 'redux/contacts/selectors';\nimport { H3, ContactsList, ContactItem, ContactName, ContactNumber, Button } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(getFilteredContacts);\n  const users = useSelector(selectContacts);\n\n  return (\n    <>\n      <H3>\n        Your phonebook has {users.length} contacts\n      </H3>\n      <ContactsList>\n        {contacts.map(item => (\n          <ContactItem key={item.id}>\n            <ContactName>{item.name}</ContactName>\n            <ContactNumber>{item.number}</ContactNumber>\n            <Button\n              type=\"button\"\n              onClick={() => dispatch(deleteContactThunk(item.id))}\n            >\n              Delete\n            </Button>\n          </ContactItem>\n        ))}\n      </ContactsList>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    margin-top: 12px;\n    font-size: 16px;\n    font-weight: 500;\n`;\n\nexport const Input = styled.input`\n    width: 250px;\n    padding: 22px 36px;\n    color: #000000;\n    background: #efefef;\n    border-radius: 18px;\n    border-style: none;\n    :placeholder {\n    color: #757575;\n    }\n`;\n\nexport const Button = styled.button`\n    font-weight: 700;\n    font-size: 18px;\n    display: flex;\n    align-items: center;\n    gap: 14px;\n    width: fit-content;\n    margin-top: 24px;\n    padding: 1.063em 1.5em;\n    background-color: #ecf0f3;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.04);\n    border: 1px solid rgba(250, 187, 24, 0.1);\n    border-radius: 14px;\n    cursor: pointer;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    transition: fill 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    :hover,\n    :focus {\n        box-shadow: none;\n        color: white;\n        background: #FD9222;\n    }\n`;","import React from 'react';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactThunk } from 'redux/contacts/operations/contactsThunk';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Form, Input, Label, Button } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const filterContact = contacts.some(\n      contact => contact.name.toLowerCase().trim() === name.toLowerCase().trim()\n    );\n\n    if (filterContact) {\n      alert(`${name} is already in contacts`);\n      resetInput();\n    return;\n}\n\n    dispatch(addContactThunk({ name, number }));\n    resetInput();\n    };\n\n    const handleChange = event => {\n      const { name, value } = event.target;\n      switch (name) {\n        case 'name':\n          setName(value);\n          break;\n        case 'number':\n          setNumber(value);\n          break;\n        default:\n          return;\n      }\n    };\n\n    const resetInput = () => {\n      setName('');\n      setNumber('');\n    };\n\n\n  return (\n    <Form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Label>\n        <Input\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          title=\"\"\n          required\n          placeholder=\"Еnter or paste name\"\n        />\n      </Label>\n      <Label>\n        <Input\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          title=\"\"\n          required\n          placeholder=\"+38 (000) 000-00-00\"\n        />\n      </Label>\n      <Button type=\"submit\">\n        Add Contact\n      </Button>\n    </Form>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 8px;\n    margin-top: 20px;\n    font-size: 16px;\n    font-weight: 500;\n`;\nexport const Input = styled.input`\n    width: 250px;\n    padding: 12px 36px;\n    color: #000000;\n    background: #efefef;\n    border-radius: 18px;\n    border-style: none;\n    :placeholder {\n        color: #757575;\n  }\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Label, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n\n  const showFilteredContacts = e => { \n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n      <Label>\n        <Input\n          type=\"text\"\n          placeholder=\"Find contacts by name...\"\n          value={filter}\n          onChange={showFilteredContacts}\n        />\n      </Label>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { fetchContactsThunk } from 'redux/contacts/operations/contactsThunk';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>   \n      <title>Phonebook</title>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectLoading = state => state.isLoading;\nexport const selectError = state => state.contacts.error;\n\nconst getFilter = state => state.filter;\nconst getContacts = state => state.contacts.items;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    if (!contacts) return;\n    return contacts.filter(item =>\n      item.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n\n"],"names":["H3","styled","_templateObject","_taggedTemplateLiteral","ContactsList","_templateObject2","ContactItem","_templateObject3","ContactName","_templateObject4","ContactNumber","_templateObject5","Button","_templateObject6","ContactList","dispatch","useDispatch","contacts","useSelector","getFilteredContacts","users","selectContacts","_jsxs","_Fragment","children","length","_jsx","map","item","name","number","type","onClick","deleteContactThunk","id","Form","Label","Input","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","handleChange","event","_event$target","target","value","resetInput","onSubmit","e","preventDefault","some","contact","toLowerCase","trim","alert","concat","addContactThunk","autoComplete","onChange","title","required","placeholder","Filter","filter","selectFilter","filterContacts","Tasks","isLoading","selectLoading","useEffect","fetchContactsThunk","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","state","items","includes"],"sourceRoot":""}